{
  "hash": "5b5646dc688ac7470c7536c81556c599",
  "result": {
    "markdown": "# Environnement de travail\n\nNotre configuration de travail implique:\n\n+ *GitHub* qui agit comme lieu principal de **stockage**, de **communication** de codes ou/et résultats, de **versioning**. \n+ *RStudio* dont le fonctionnement avec `bookdown` est particulièrement appréciable\n+ *Sublime Text* qui doit être mieux connue mais permet de travailler sur des bouts de code avec une syntaxe couleurs et facilite ainsi le *copier/coller* d'anciens projets vers de nouveaux.\n\n## GitHub et structure des dossiers\n\n<!-- explication, avantages, inconvénients \n\nreprendre le démarrage de projets depuis le site de Silvia -->\n\nOn dispose d'un compte chez *GitHub*. Le compte est lié à 3 machines (2 macs et un pc). Le *commit* et le *push* se réalisent depuis RStudio directement. Sur chaque machine, on s'offre tout de même une solution *user friendly* avec *GitHub Desktop*.\n\nSur chaque machine, on dispose d'une structure des dossiers de type *Documents > GitHub > r-projects* (attention à la casse).\n\nLe dossier *r-projects* contient autant de sous-dossiers que de projets à analyser. \n\nChaque sous-dossier a un nom structuré ainsi (attention à la casse) : *contexteannée_initialesauteurprincipal* (par exemple : *dupp2019_cr* ou *crips2019_lv*).\n\nDans chaque sous-dossier:\n\n+ un fichier *Rproj* est disponible et il porte le nom du sous-dossier\n+ un fichier présentant les données brutes (raw) est disponible (en lecture seule de préférence) et il porte un titre de la forme *nomsousdossier_raw*. Il peut être en format *.csv* ou *.xlsx*. Si les données brutes sont sur plusieurs fichiers (dans le cas de plusieurs temps de mesure, par exemple, on les distingue avec l'ajout *_t1*, ...)\n+ un fichier de script *.R* intitulé *nomsousdossier_script*\n+ un fichier Rmarkdown *.Rmd* intitulé *nomsousdossier_rapport* et rédigé en parallèle du script. Ce rapport général appelle le script pour réaliser les sorties.\n\n> On ne s'est pas encore déterminé sur les bonnes pratiques pour la constitution du rapport en RMarkdown : Est-ce OK et satisfaisant de \"simplement\" rappeler le script et uniquement \"afficher\" les objets ?\n\n+ les sorties de type *HTML*, *PDF*, ou image (*png*, *svg*, ...) n'obéissent pas à des règles précises.\n+ plusieurs rapports peuvent coexister en fonction des destinataires ; ils sont tous une adaptation du rapport \"master\" décrit plus haut.\n\nL'intérêt est d'avoir à tout moment sur GitHub une vision claire des modifications réalisées à travers les différentes étapes de mise à jour des fichier (traçabilité de la démarche). De plus, une attention particulière est accordée à l'écriture d'un code avec une grammaire (le plus possible) conventionnelle qui est lisible et commenté, que ce soit dans le script ou dans le rapport en RMarkdown.\n\nLe script et le rapport se rédigent en parallèle.\n\n## Rédaction du code et grammaire\n\nLe code suivant est, à notre sens, un exemple de bonne pratique car :\n\n+ des titres mis en évidence structurent le code\n+ les commentaires sont présents; ils se veulent précis et concis\n+ des espaces facilitent la lecture\n+ le code n'est pas *- à notre connaissance -* inutilement répétitif\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###############\n#visualisation#\n###############\n\n#score échelle HBSC\n\nvis_hbs <- d_long_paired %>% \n  ggplot() +\n  aes(x = temps, color = group, y = hbs_sco) +\n  geom_boxplot(alpha = .5) +\n  geom_jitter(size = 5, alpha = .5, position = position_jitterdodge(dodge.width=.7, jitter.width = .2)) +\n  stat_summary(fun = mean, geom = \"point\", size = 3, shape = 4) +\n  stat_summary(fun = mean, aes(group = group), geom = \"line\") +\n  labs(title = \"Mesure des CPS\", y = \"Score au HBSC\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  scale_color_brewer(\"Groupe\", palette = \"Set1\")\n```\n:::\n\n\nUn autre exemple illustre cette grammaire. On rajoute quelques espaces pour faciliter la lecture et repérer les structures *- parfois nécessairement -* répétitives :\n\n> On aimerait toutefois savoir comment éviter ces répétitions. Notamment quand on génère 10 graphiques qui ne varient, dans le code, qu'au niveau de l'axe Y et le titre, par exemple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Création des moyennes de chaque questionnaire pour chaque observation\n\nd_long <- d_long %>% \n  mutate(hbs_sco = rowMeans(select(.,starts_with(\"hbs\")),na.rm =T),\n         pec_sco = rowMeans(select(.,starts_with(\"pec\")),na.rm =T),\n         be_sco  = rowMeans(select(.,starts_with(\"be\")) ,na.rm =T),\n         est_sco = rowMeans(select(.,starts_with(\"est\")),na.rm =T),\n         cli_sco = rowMeans(select(.,starts_with(\"cli\")),na.rm =T),\n         sou_sco = rowMeans(select(.,starts_with(\"sou\")),na.rm =T),\n         mot_sco = rowMeans(select(.,starts_with(\"hbs\")),na.rm =T))\n```\n:::\n\n\n**Une source pour la grammaire du codage peut être consultée à l'adresse :** https://www.inwt-statistics.com/read-blog/inwts-guidelines-for-r-code.html \n\n## RStudio et packages\n\nOn dispose en l'état de la version 4.0.2 de R ainsi que de la version 1.3.959 de RStudio.\n\nSur les macs, différents ajouts comme Xquartz ou des modules liés à LaTeX sont également installés.\n\n> Mais honnêtement, on a perdu de vue leur rôle plus ou moins nécessaire sachant que LaTeX est certes nécessaire pour les sorties PDF sans que toutes les extensions liées à LaTex le soient... Ce sera à clarifier au prochain clean install.\n\nPour la version PC, on a installé tinyTEX 'tinytex::install_tinytex()' directement 'TinyTeX to C:\\Users\\nbr\\AppData\\Roaming/TinyTeX' depuis la console. On rappelle que `LaTeX` est nécessaire à la génération de *PDF*.\n\nDans R, les packages suivants sont installés:\n\n+ `tidyverse`, suite de packages pour travailler de manière *tidy* (bien rangé) : `ggplot2`, `dplyr`, `tidyr`, `readr`, `purrr`, `tibble`, `stringr`, `forcats`.\n+ `readxl`, permet de lire et importer les fichiers .xlsx.\n+ `bookdown`, permet de réaliser à peu de frais le présent livre\n\nEn principe, pour des raisons d'élégance du code, on cherche à limiter la sur-installation de nouveaux packages. Il s'agit d'explorer ce que les packages installés ont à offrir avant de courir sur d'autres fonctions vues sur le web.\n\n## Sublime Text et Packages\n\nL'utilisation de Sublime Tex est ergonomique. Les packages du logiciel permettent de travailler comme R Studio, avec toutefois un environnement plus aéré et propice à la rédaction avec des codes couleurs agréables. Il est complémentaire à RStudio mais peut carrément le remplacer pour certaines courtes étapes de rédaction.\n\nLes packages installés sont:\n\n+ sur PC : R-Box, R-IDE, LSP\n+ sur MAC : R-Box, SendCode\n\n> On doit encore clarifier comment lier sur PC et MAC GitHub. Mais ce n'est pas prioritaire. GitHub sur Sublime Text ? Emmet, git, sublime github. https://gist.github.com/KedrikG/f7b955dc371b1204ec76ce862e2dcd2e\n\n## Scrivener 3 + Zotero + BetterBibText - Rédaction d'articles longs\n\nOn doit déterminer comment travailler en `RMarkdown` pour des articles longs via `Scrivener 3`. Ce logiciel a l'avantage de facilement découper l'article en plusieurs zones de travail et *fusionner* le tout à l'export. De plus, on peut lier dynamiquement la rédaction à Zotero via un fichier `Bibtex` ce qui est très intéressant.\n\nOn pense aussi à rassembler les éléments rédigés dans Scrivener et compiler le tout avec `Bookdown` sous R.\n\nUn hypothétique *workflow\" serait : script dans R > ébauche de rapport dans R (RMarkdown) > copier/coller de l'ébauche de rapport dans Scrivener > rédaction dans Scrivener en compatibilité avec `Bookdown` > export de Scrivener dans R > préparation de la sortie avec `Bookdown`.\n\nMais ce n'est pas optimal. Notre souhait est de pouvoir, p.ex., modifier une donnée dans la source des données (le fichier brut) et cliquer sur un (voire deux) boutons pour mettre à jour l'article final ! On n'y est pas encore !!\n\nL'organisation de la rédaction est un gros chantier qui n'est pas du tout structuré en l'état.\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}